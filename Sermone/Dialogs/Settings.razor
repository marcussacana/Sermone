@using Sermone.Types
@using Sermone.Languages
@inject IModalDialogService Modal

<ul class="nav nav-tabs">
    <li class="nav-item @(CurrentPage == 0 ? "active" : "")">
        <a @onclick="() => SetPage(0)" class="nav-link" href="#">Sermone</a>
    </li>
    <li class="@(CurrentPage == 1 ? "active" : "")">
        <a @onclick="() => SetPage(1)" class="nav-link"  href="#">@CurrentLanguage.Filter</a>
    </li>
</ul>

@switch (CurrentPage)
{
    case 0:
        <SettingsSermone Parent="@this" />
        break;
    case 1:
        <SettingsFilter Parent="@this" />
        break;
}

<div class="position-relative">
    <button @onclick="SaveClicked" class="btn btn-primary right">@CurrentLanguage.Save</button>
</div>
<br />
<br />

@code {

    int CurrentPage = 0;

    public ILang CurrentLanguage => Program.AllLanguages[Configs.Language];

    public Config? _Configs;
    public Config Configs
    {
        get
        {
            if (_Configs != null)
                return _Configs.Value;

            _Configs = Engine.Settings;
            return _Configs.Value;
        }
        set { _Configs = value; }
    }

    public string DenyList
    {
        get { return Configs.DenyList; }
        set
        {
            var TmpConf = Configs;
            TmpConf.DenyList = value;
            Configs = TmpConf;
        }
    }

    public string IgnoreList
    {
        get { return Configs.IgnoreList; }
        set
        {
            var TmpConf = Configs;
            TmpConf.IgnoreList = value;
            Configs = TmpConf;
        }
    }

    public string QuoteList
    {
        get { return Configs.QuoteList; }
        set
        {
            var TmpConf = Configs;
            TmpConf.QuoteList = value;
            Configs = TmpConf;
        }
    }

    public string Breakline
    {
        get { return Configs.Breakline; }
        set
        {
            var TmpConf = Configs;
            TmpConf.Breakline = value;
            Configs = TmpConf;
        }
    }

    public string AcceptableRanges
    {
        get { return Configs.AcceptableRanges; }
        set
        {
            var TmpConf = Configs;
            TmpConf.AcceptableRanges = value;
            Configs = TmpConf;
        }
    }

    public bool FromAsian
    {
        get { return Configs.FromAsian; }
        set
        {
            var TmpConf = Configs;
            TmpConf.FromAsian = value;
            Configs = TmpConf;
        }
    }

    public int Sensitivity
    {
        get { return Configs.Sensitivity; }
        set
        {
            var TmpConf = Configs;
            TmpConf.Sensitivity = value;
            Configs = TmpConf;
        }
    }

    public string PasteUsername
    {
        get { return Configs.PasteUsername; }
        set
        {
            var TmpConf = Configs;
            TmpConf.PasteUsername = value;
            Configs = TmpConf;
        }
    }

    public string PastePassword
    {
        get { return Configs.PastePassword; }
        set
        {
            var TmpConf = Configs;
            TmpConf.PastePassword = value;
            Configs = TmpConf;
        }
    }

    public int BackupOn
    {
        get { return Configs.BackupOn; }
        set
        {
            var TmpConf = Configs;
            TmpConf.BackupOn = value;
            Configs = TmpConf;
        }
    }

    public void SetLanguage(int ID)
    {
        var TmpConf = Configs;
        TmpConf.Language = ID;
        Configs = TmpConf;
        Refresh();
    }

    void SaveClicked()
    {
        Engine.Settings = Configs;
        Modal.Close(true);
    }

    void SetPage(int ID)
    {
        CurrentPage = ID;
        Refresh();
    }

    public void Refresh() => this.StateHasChanged();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSWrapper.EnableTooltips();
    }
}
