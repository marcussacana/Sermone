<nav class="navbar navbar-expand-sm navbar-dark bg-dark @NavMenuVisibility">
    <a class="navbar-brand" id="NavLogo" href="#">Sermone</a>
    <ul class="navbar-nav mr-auto">
        <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="NavFileDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @Engine.Language.File
            </a>
            <div class="dropdown-menu" aria-labelledby="NavFileDropdown">

                <input type="file" id="FOpen" @ref="Engine.InputRef" @onchange="Engine.FileChanged" hidden>
                <a class="dropdown-item" @onclick="@OpenClicked" href="#">@Sermone.Engine.Language.Open</a>
                <a class="dropdown-item" @onclick="@OpenAsClicked" href="#">@Sermone.Engine.Language.OpenAs</a>
                <a class="dropdown-item" @onclick="@OpenSecondaryClicked" href="#">@Sermone.Engine.Language.OpenReference</a>
                <a class="dropdown-item" @onclick="@OpenSecondaryAsClicked" href="#">@Sermone.Engine.Language.OpenAsReference</a>
                <a class="dropdown-item @(NavMenuSaveClass)" @onclick="@(()=> Engine.SaveFile())" href="#">@Sermone.Engine.Language.Save</a>

            </div>
        </li>
        <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="NavFilterDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @Engine.Language.Filter
            </a>
            <div class="dropdown-menu" aria-labelledby="NavFilterDropdown">
                <a class="dropdown-item" @onclick="@Engine.AutoSelect" href="#">@Sermone.Engine.Language.AutoSelect</a>
                <a class="dropdown-item" @onclick="@(() => Engine.ForceSelection(true))" href="#">@Sermone.Engine.Language.SelectAll</a>
                <a class="dropdown-item" @onclick="@(() => Engine.ForceSelection(false))" href="#">@Sermone.Engine.Language.DeselectAll</a>

            </div>
        </li>
        <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="NavOthersDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @Engine.Language.Others
            </a>
            <div class="dropdown-menu" aria-labelledby="NavOthersDropdown">
                <a class="dropdown-item" @onclick="Engine.ShowBackups" href="#" >Backups</a>
                <a class="dropdown-item" @onclick="SettingsClicked" href="#">@Engine.Language.Settings</a>
            </div>
        </li>
    </ul>
    <div class="form-inline my-2 my-lg-0">
        <input class="form-control mr-sm-2" type="search" placeholder="@Engine.Language.Search" aria-label="@Engine.Language.Search" @bind-value:event="oninput" @bind-value="@Search" @onkeydown="@OnSearchKeyDown">
        <button class="btn btn-outline-success my-2 my-sm-0" id="NavSearchBtn" @onclick="@(async() => await Engine.DoSearch(Search))">@Engine.Language.Search</button>
    </div>
</nav>

@code {

    public string Search { get; private set; }

    private string NavMenuVisibility => Engine.Plugins == null ? "hide" : "";

    private string NavMenuSaveClass => Engine.CanSave ? null : "disabled";

    DateTime LastEvent = DateTime.Now;
    TimeSpan EleapsedTime => DateTime.Now - LastEvent;

    public async Task OnSearchKeyDown(KeyboardEventArgs Args)
    {
        if (Args.Code == "Enter" && EleapsedTime.TotalMilliseconds > 200)
        {
            await Engine.DoSearch(Search);
            LastEvent = DateTime.Now;
        }
    }

    async Task SettingsClicked()
    {
        int CurrentLang = Engine.Settings.Language;
        var Result = await Header.Modal.ShowDialogAsync<Sermone.Dialogs.Settings>(Engine.Language.Settings);

        if (Result.Success)
        {
            await Program.UpdateSettings();

            if (Engine.Settings.Language != CurrentLang)
                Engine.MainLayout.Refresh();
        }

        await JSWrapper.DestroyTooltips();
    }

    async Task OpenClicked()
    {
        await Engine.Open();
    }

    async Task OpenAsClicked()
    {
        await Engine.OpenAs(false);
    }

    async Task OpenSecondaryClicked()
    {
        await Engine.Open(AsSecondary: true);
    }

    async Task OpenSecondaryAsClicked()
    {
        await Engine.OpenAs(true);
    }

    public void Refresh() => this.StateHasChanged();
}
